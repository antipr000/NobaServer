#to find the usage of any variable in this file search globally in vscode with ctrl+shift+f

envType: e2e_test

apiPrefix: "/v1"
logFilePath: "/tmp/noba_server.log"

awsRegion: "us-east-1"
awsDefaultRegion: "us-east-1"
awsAccountID: "210194402305"
# AWS Credentials for local development & testing.
# The changes to this file will not be push to github, so feel free to paste the secrets of development environment here.

awsAccessKeyId: "test"
awsSecretAccessKey: "test"

# TODO(#279): Refactor all the secrets once e2e_test env shifts to ec2.
kms:
  context:
    stage: "e2e_test"
    purpose: "Noba Onramp app"
    origin: "us-east-1"
  ssn:
    awsSecretNameForGeneratorKeyArn: "TEST_SSN_GENERATOR_KEY_ARN"
    generatorKeyArn: "bogus-value"
    awsSecretNameForFollowUpKeyArn: "TEST_SSN_FOLLOW_UP_KEY_1_ARN"
    followUpKeyArn: "bogus-value"

# AWS KMS Encryption key references
# kmsGeneratorKeyID is global to all keys
# Each key followed by _keyID uses a prefix which is our alias to that key. This must match between KMS and our application.
awskms:
  kmsGeneratorKeyID: "arn:aws:kms:us-east-1:210194402305:alias/master-key"
  ssn-encryption-key_keyID: "arn:aws:kms:us-east-1:210194402305:key/39d511f4-c1ff-4d21-b6d5-c3347f0b671c"

#in production we should take it from vault, only for testing here, todo remove or create test api_key with limit on number of emails
sendgrid:
  awsSecretNameForApiKey: "" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  apiKey: "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"

checkout:
  awsSecretNameForPublicKey: "" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForSecretKey: ""
  publicKey: "pk_sbox_m3756a5g3z4ootpdssqy3hxxemv"
  secretKey: "sk_sbox_xdhkcai4bosm32intni46my5x4j"
  couponCode: "NY2018"
  partnerId: 123989

twilio:
  awsSecretNameForSID: ""
  awsSecretNameForAuthToken: ""
  SID: "AC4efa22156849ec40b383a80f45525409"
  authToken: "c34165debbb0a77e3507884e86b88772"
  fromPhoneNumber: "+19894557345"

mongo:
  awsSecretNameForUri: "" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  uri: ""
  sslEnabled: false

sardine:
  awsSecretNameForSardineClientID: "" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForSardineSecretKey: ""
  awsSecretNameForSardineWebhookSecretKey: ""
  clientID: "26c92075-4b15-4d3a-a037-6251661a5474"
  secretKey: "b8713dfa-5785-49cf-94b6-ed969e0e55cd"
  webhookSecretKey: "bogus-value" # Useless in this environment because Sardine is not calling us
  sardineBaseUri: "https://api.sandbox.sardine.ai"

noba:
  partnerID: "d4KZqfVKwSHWueOJhmgN-"
  transaction:
    spreadPercentage: "0.029"
    awsSecretKeyForSpreadPercentage: ""
    flatFeeDollars: "1.99"
    awsSecretKeyForFlatFeeDollars: ""
    dynamicCreditCardFeePercentage: "0.029"
    awsSecretKeyForDynamicCreditCardFeePercentage: ""
    fixedCreditCardFee: "0.3"
    awsSecretKeyForFixedCreditCardFee: ""
    slippageAllowedPercentage: ".02"
    awsSecretKeyForSlippageAllowedPercentage: ""

zerohash:
  awsSecretNameForApiKey: "" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForApiSecret: "" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForPassPhrase: "" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForHost: ""
  awsSecretNameForPlatformCode: ""
  apiKey: "uCeknMhWLfW4CBLQ6uT39k"
  apiSecret: "4jtj1kUm64LKiXE7i7DjpLqb2le/yJmLhcQlHzsSno8="
  passPhrase: "noba_zerohash_sandbox"
  host: "api.cert.zerohash.com"
  platformCode: "6MWNG6"
  proxyServerIP: ""
  proxyServerPort:

elliptic:
  awsSecretNameForApiKey: ""
  awsSecretNameForSecretKey: ""
  apiKey: "57073bf78dd8254f2cc34b187017bfa9"
  secretKey: "63a1e25708177ca72113ac07f659ea50"
  baseUrl: "https://aml-api.elliptic.co"

squid:
  awsSecretNameForApiKey: ""
  apiKey: "testApiKey"
  baseUrl: "https://testnet.api.0xsquid.com"
  intermediaryLeg: "AVAX"
  temporaryWalletAddress: "0xDb933AE704a2D8acF4201D75106464b30dEC1E4e"
  slippage: 1

configuration:
  lowAmountThreshold: 1
  highAmountThreshold: 200
  cryptoImageBaseUrl: "https://dj61eezhizi5l.cloudfront.net/assets/images/currency-logos/crypto"
  fiatImageBaseUrl: "https://dj61eezhizi5l.cloudfront.net/assets/images/currency-logos/fiat"

locationDataFileName: "countries+states.json"
ccBINDataFileNameMask: "all_bins.csv"
assetsBucketName: "prod-noba-assets"
supportedCryptoFileBucketPath: "assets/data/cryptocurrency_tokens.csv"
sanctionedCryptoWalletsFileBucketPath: "assets/data/sanctioned_wallets.csv"
