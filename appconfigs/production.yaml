envType: "production"

# ***** SENSITIVE PRODUCTION CONFIGURATIONS SUCH AS PASSWORDS,SECRETS SHOULDN'T BE PUT HERE,
# ***** INSTEAD SHOULD BE INJECTED FROM SECRETS AT RUNTIME OR SHOULD BE PASSED AS ENVIRONMENT VARIABLE

logFilePath: "/home/ubuntu/noba_server.log"

awsRegion: "us-east-1"
awsDefaultRegion: "us-east-1"
awsAccountID: "210194402305"
awsMasterSecret: "PROD_MASTER_SECRET"

kms:
  context:
    stage: "production"
    purpose: "Noba Onramp app"
    origin: "us-east-1"
  ssn:
    awsSecretNameForGeneratorKeyArn: "PROD_SSN_GENERATOR_KEY_ARN"
    generatorKeyArn: "bogus-value"
    awsSecretNameForFollowUpKeyArn: "PROD_SSN_FOLLOW_UP_KEY_1_ARN"
    followUpKeyArn: "bogus-value"

# AWS KMS Encryption key references
# kmsGeneratorKeyID is global to all keys
# Each key followed by _keyID uses a prefix which is our alias to that key. This must match between KMS and our application.
awskms:
  kmsGeneratorKeyID: "arn:aws:kms:us-east-1:210194402305:alias/master-key"
  ssn-encryption-key_keyID: "arn:aws:kms:us-east-1:210194402305:key/39d511f4-c1ff-4d21-b6d5-c3347f0b671c"

#in production we should take it from vault, only for testing here, todo remove or create test api_key with limit on number of emails
sendgrid:
  awsSecretNameForApiKey: "PROD_SENDGRID_SECRET" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  apiKey: "bogus-value"

twilio:
  awsSecretNameForSID: "PROD_TWILIO_SID"
  awsSecretNameForAuthToken: "PROD_TWILIO_SECRET"
  SID: "bogus-value"
  authToken: "bogus-value"
  fromPhoneNumber: "+17863055237"

checkout:
  awsSecretNameForPublicKey: "PROD_CHECKOUT_PUBLIC_KEY" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForSecretKey: "PROD_CHECKOUT_SECRET_KEY"
  publicKey: "bogus-value"
  secretKey: "bogus-value"
  couponCode: "NY2018"
  partnerId: 123989
  processingChannelId: "pc_v5hfxdz7txiuflbqrb6a4aa5qq"
  webhookSignatureKey: "bogus-value"
  awsSecretNameForWebhookSignatureKey: "PROD_CHECKOUT_WEBHOOK_SIGNATURE_KEY"
  apiUrl: "https://api.checkout.com"
  nobaWebhookUrl: "disabled"

sardine:
  awsSecretNameForSardineClientID: "PROD_SARDINE_CLIENT_ID" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForSardineSecretKey: "PROD_SARDINE_SECRET"
  awsSecretNameForSardineWebhookSecretKey: "PROD_SARDINE_WEBHOOK_SECRET" # Sardine will never call us in this env, however
  clientID: "bogus-value"
  secretKey: "bogus-value"
  webhookSecretKey: "bogus-value"
  sardineBaseUri: "https://api.sardine.ai"

noba:
  appSecretKey: ""
  privateBearerToken: ""
  adminBearerToken: ""
  awsSecretKeyForAdminBearerToken: "PROD_NOBA_ADMIN_BEARER_TOKEN"
  awsSecretKeyForPrivateBearerToken: "PROD_NOBA_PRIVATE_BEARER_TOKEN"
  awsSecretKeyForAppSecretKey: "PROD_NOBA_APP_SECRET"
  bubbleBearerToken: ""
  awsSecretKeyForBubbleBearerToken: "PROD_NOBA_BUBBLE_BEARER_TOKEN"
  transaction:
    spreadPercentage: ""
    awsSecretKeyForSpreadPercentage: "PROD_NOBA_SPREAD_PERCENTAGE"
    flatFeeDollars: ""
    awsSecretKeyForFlatFeeDollars: "PROD_NOBA_FLAT_FEE_DOLLARS"
    dynamicCreditCardFeePercentage: ""
    awsSecretKeyForDynamicCreditCardFeePercentage: "PROD_NOBA_DYNAMIC_CREDIT_CARD_FEE_PERCENTAGE"
    fixedCreditCardFee: ""
    awsSecretKeyForFixedCreditCardFee: "PROD_NOBA_FIXED_CREDIT_CARD_FEE_DOLLARS"
    slippageAllowedPercentage: ""
    awsSecretKeyForSlippageAllowedPercentage: "PROD_NOBA_SLIPPAGE_ALLOWED_PERCENTAGE"
    collectionFeeMultiplier: ""
    awsSecretKeyForCollectionFeeMultiplier: "PROD_NOBA_COLLECTION_FEE_MULTIPLIER"
    collectionFeeFixedAmount: ""
    awsSecretKeyForCollectionFeeFixedAmount: "PROD_NOBA_COLLECTION_FEE_FIXED_AMOUNT"
    collectionNobaFeeAmount: ""
    awsSecretKeyForCollectionNobaFeeAmount: "PROD_NOBA_COLLECTION_NOBA_FEE_AMOUNT"
    depositFeeMultiplier: ""
    awsSecretKeyForDepositFeeMultiplier: "PROD_NOBA_DEPOSIT_FEE_MULTIPLIER"
    depositFeeFixedAmount: ""
    awsSecretKeyForDepositFeeFixedAmount: "PROD_NOBA_DEPOSIT_FEE_FIXED_AMOUNT"
    depositNobaFeeAmount: ""
    awsSecretKeyForDepositNobaFeeAmount: "PROD_NOBA_DEPOSIT_NOBA_FEE_AMOUNT"
    withdrawalMonoFeeAmount: ""
    awsSecretKeyForWithdrawalMonoFeeAmount: "PROD_NOBA_WITHDRAWAL_MONO_FEE_AMOUNT"
    withdrawalNobaFeeAmount: ""
    awsSecretKeyForWithdrawalNobaFeeAmount: "PROD_NOBA_WITHDRAWAL_NOBA_FEE_AMOUNT"

zerohash:
  awsSecretNameForApiKey: "PROD_ZEROHASH_API_KEY" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForApiSecret: "PROD_ZEROHASH_API_SECRET" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForPassPhrase: "PROD_ZEROHASH_PASS_PHRASE" # if this is present then we fetch the secret key from aws secret manager else we take it from the configs, for production environment we shouldn't put the secret in the config files
  awsSecretNameForHost: "PROD_ZEROHASH_HOST"
  awsSecretNameForPlatformCode: "PROD_ZEROHASH_PLATFORM_CODE"
  apiKey: ""
  apiSecret: ""
  passPhrase: ""
  host: ""
  platformCode: ""
  proxyServerIP: "172.31.8.170"
  proxyServerPort: 3128

elliptic:
  awsSecretNameForApiKey: "PROD_ELLIPTIC_KEY"
  awsSecretNameForSecretKey: "PROD_ELLIPTIC_SECRET"
  apiKey: ""
  secretKey: ""
  baseUrl: "https://aml-api.elliptic.co"

configuration:
  lowAmountThreshold: 50
  highAmountThreshold: 200
  cryptoImageBaseUrl: "https://dj61eezhizi5l.cloudfront.net/assets/images/currency-logos/crypto"
  fiatImageBaseUrl: "https://dj61eezhizi5l.cloudfront.net/assets/images/currency-logos/fiat"

plaid:
  env: "sandbox"
  version: "2020-09-14"
  redirectUri: ""
  awsSecretNameForRedirectUri: "PROD_PLAID_REDIRECT_URI"
  clientID: ""
  awsSecretNameForClientID: "PROD_PLAID_CLIENT_ID"
  secretKey: ""
  awsSecretNameForSecretKey: "PROD_PLAID_SECRET_KEY"

circle:
  env: "production"
  apiKey: ""
  awsSecretNameForApiKey: "PROD_CIRCLE_API_KEY"
  masterWalletID: ""
  awsSecretNameForMasterWalletID: "PROD_CIRCLE_MASTER_WALLET_ID"

nobaWorkflow:
  taskQueue: "NOBA_TASK_QUEUE"
  awsSecretNameForTaskQueue: "PROD_NOBA_WORKFLOW_TASK_QUEUE"
  clientUrl: ""
  awsSecretNameForClientUrl: "PROD_NOBA_WORKFLOW_CLIENT_URL"
  awsSecretForTemporalCloudCertificate: "PROD_TEMPORAL_CLOUD_CERTIFICATE"
  awsSecretForTemporalCloudPrivateKey: "PROD_TEMPORAL_CLOUD_PRIVATE_KEY"
  connectionTimeoutInMs: 1000
  namespace: "production.h4n3l"

mono:
  bearerToken: ""
  awsSecretNameForBearerToken: "PROD_MONO_BEARER_TOKEN"
  baseURL: ""
  awsSecretNameForBaseURL: "PROD_MONO_BASE_URL"
  nobaAccountID: ""
  awsSecretNameForNobaAccountID: "PROD_MONO_NOBA_ACCOUNT_ID"
  webhookSecret: ""
  awsSecretNameForWebhookSecret: "PROD_MONO_WEBHOOK_SECRET"

bubble:
  bearerToken: ""
  awsSecretNameForBearerToken: "PROD_BUBBLE_BEARER_TOKEN"
  baseURL: ""
  awsSecretNameForBaseURL: "PROD_BUBBLE_BASE_URL"

dependencies:
  emailClient: "SENDGRID"
  smsClient: "TWILIO"
  dashboardClient: "BUBBLE"

locationDataFileName: "countries+states.json"
dbDumpFilesBucketPath: "dump"
assetsBucketName: "prod-noba-assets"
supportedCryptoFileBucketPath: "assets/data/cryptocurrency_tokens.csv"
sanctionedCryptoWalletsFileBucketPath: "assets/data/sanctioned_wallets.csv"
