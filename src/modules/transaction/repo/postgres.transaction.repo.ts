import { Prisma, Transaction as PrismaTransactionModel } from "@prisma/client";
import { Inject, Injectable } from "@nestjs/common";
import { WINSTON_MODULE_PROVIDER } from "nest-winston";
import {
  ErrorSavingReportInDatabaseException,
  InvalidDatabaseRecordException,
} from "../../../core/exception/CommonAppException";
import { PrismaService } from "../../../infraproviders/PrismaService";
import { Logger } from "winston";
import {
  convertToDomainTransaction,
  Transaction,
  validateInputTransaction,
  validateSavedTransaction,
} from "../domain/Transaction";
import { ITransactionRepo } from "./transaction.repo";

@Injectable()
export class PostgresTransactionRepo implements ITransactionRepo {
  constructor(
    private readonly prismaService: PrismaService,
    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,
  ) {}

  async createTransaction(transaction: Transaction): Promise<Transaction> {
    validateInputTransaction(transaction);

    let savedTransaction: Transaction = null;

    try {
      // Note that "createdTimestamp", "updatedTimestamp" & "ID" are not included in the input.
      // They are automatically generated by the database.
      const transactionInput: Prisma.TransactionCreateInput = {
        transactionRef: transaction.transactionRef,
        workflowName: transaction.workflowName,
        consumer: {
          connect: {
            id: transaction.consumerID,
          },
        },
        amount: transaction.amount,
        currency: transaction.currency,
        status: transaction.status,
        exchangeRate: transaction.exchangeRate,
      };

      const returnedTransaction: PrismaTransactionModel = await this.prismaService.transaction.create({
        data: transactionInput,
      });
      savedTransaction = convertToDomainTransaction(returnedTransaction);
    } catch (err) {
      this.logger.error(JSON.stringify(err));
      throw new ErrorSavingReportInDatabaseException({
        message: "Error saving transaction in database",
      });
    }

    try {
      validateSavedTransaction(savedTransaction);
      return savedTransaction;
    } catch (err) {
      this.logger.error(JSON.stringify(err));
      throw new InvalidDatabaseRecordException({
        message: "Invalid database record",
      });
    }
  }
}
