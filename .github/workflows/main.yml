name: CI

# Controls when the workflow will run
on:
  # Only deploy the changes on push to main branch
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "*-partner"
      - "*-staging"
      - "sandbox"
    branches: [main]
  pull_request:
    branches: [main]
    types: [labeled, opened, synchronize]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-environment:
    uses: nobapay/NobaServer/.github/workflows/setup-environment.yml@main

  builddeploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 15 # we expect it to complete much before 15 minutes
    needs: [setup-environment]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Restore environment from cache
        id: restore-environment
        uses: actions/cache@v3
        env:
          cache-name: ${{ github.run_number }}
        with:
          path: ./
          key: ${{ runner.os }}-build-${{ github.run_number }}

      # Generates a build_info file which can be shown in buildInfo controller of the server
      - name: Generate build info file
        id: build_info
        run: |
          cat > build_info.yml <<- EOM
          commitSHA: $GITHUB_SHA
          commitRef: $GITHUB_REF
          buildTime: $( date -u )
          EOM

          refName=${GITHUB_REF##*/}
          shortSHA=$(git rev-parse --short HEAD)
          version_label="dev"

          if [[ ${GITHUB_REF:-noref} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version_label=$refName
          else
            version_label="${refName}-${shortSHA}"
          fi
            
          echo "version_label=$version_label" >> $GITHUB_OUTPUT

      # Runs a set of commands using the runners shell
      - name: Build
        run: |
          yarn build
          ls -l
          echo [SUCCESS] yarn build succeeded.
          zip -r artifacts.zip ./ -x "./src/*" "./node_modules/*"

      - name: Check If should deploy and Decide deployment type
        id: check-tag
        run: |
          #figure out AWS ElasticBeanstalk Environment
          ebEnvironment=none
          if [[ ${GITHUB_REF:-noref} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              ebEnvironment=production
          elif [[ ${GITHUB_REF:-noref} =~ ^refs/tags/.*-partner$ ]]; then
              ebEnvironment=partner
          elif [[ ${GITHUB_REF:-noref} =~ ^refs/tags/.*-staging$ ]]; then
              ebEnvironment=staging
          elif [[ ${GITHUB_REF:-noref} =~ main ]]; then
              ebEnvironment=dev
          elif [[ ${GITHUB_REF:-noref} =~ ^refs/tags/sandbox$ ]]; then
              ebEnvironment=sandbox
          fi

          echo "*** Will deploy to ebEnvironment $ebEnvironment ***"

          echo "ebEnvironment=:$ebEnvironment" >> $GITHUB_OUTPUT

      - name: Check If should deploy to sandbox environment based on pull request labels
        id: check-deploy-sandbox
        if: "contains(github.event.pull_request.labels.*.name, 'deploy-sandbox')"
        run: |
          ebEnvironment=sandbox
          echo "ebEnvironment=sandbox" >> $GITHUB_OUTPUT

      - name: Deploy to EB
        if: "!contains(steps.check-tag.outputs.ebEnvironment, 'none')" # run this job only if ebEnvironment is not none
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: nobaserver
          environment_name: nobaserver-${{steps.check-tag.outputs.ebEnvironment}}
          version_label: ${{steps.build_info.outputs.version_label}}
          use_existing_version_if_available: "true"
          region: us-east-1
          deployment_package: artifacts.zip

      - name: Deploy to EB Sandbox
        if: "contains(steps.check-deploy-sandbox.outputs.ebEnvironment, 'sandbox')" # run this job only if ebEnvironment is sandbox
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: nobaserver
          environment_name: nobaserver-${{steps.check-deploy-sandbox.outputs.ebEnvironment}}
          version_label: ${{steps.build_info.outputs.version_label}}
          use_existing_version_if_available: "true"
          region: us-east-1
          deployment_package: artifacts.zip
