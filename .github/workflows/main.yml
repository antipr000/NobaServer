name: Deploy to AWS

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
# Controls when the workflow will run
on:
  # Only deploy the changes on push to main branch
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+[0-9]?"
      - "*-partner"
      - "*-staging"
      - "sandbox"
    branches: [main]
  pull_request:
     branches: [main]
     types: [labeled]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-environment:
    uses: ./.github/workflows/setup-environment.yml

  builddeploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 15 # we expect it to complete much before 15 minutes
    needs: [setup-environment]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Restore environment from cache
        id: restore-environment
        uses: actions/cache@v3
        env:
          cache-name: ${{ github.run_number }}
        with:
          path: ./
          key: ${{ runner.os }}-build-${{ github.run_number }}

      # Generates a build_info file which can be shown in buildInfo controller of the server
      - name: Generate build info file
        id: build_info
        run: |
          refName=${GITHUB_REF##*/}
          shortSHA=$(git rev-parse --short HEAD)
          version_label="dev"

          if [[ ${GITHUB_REF:-noref} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version_label=$refName
          else
            version_label="${refName}-${shortSHA}"
          fi
            
          cat > build_info.yml <<- EOM
          commitSHA: $GITHUB_SHA
          commitRef: $GITHUB_REF
          buildTime: $( date -u )
          version: $version_label
          EOM

          echo "version_label=$version_label" >> $GITHUB_OUTPUT

      - name: Determine where to deploy
        id: check-tag
        run: |
          #figure out AWS ElasticBeanstalk Environment
          ebEnvironment=none
          if [[ ${GITHUB_REF:-noref} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              ebEnvironment=production
              echo "DATABASE_URL=${{secrets.AURORA_BASE_URL_PROD}}?schema=$ebEnvironment" >> $GITHUB_ENV
              echo "NODE_ENV=$ebEnvironment" >> $GITHUB_ENV
          elif [[ ${GITHUB_REF:-noref} =~ ^refs/tags/.*-partner$ ]]; then
              ebEnvironment=partner
              echo "DATABASE_URL=${{secrets.AURORA_BASE_URL_LOWERS}}?schema=$ebEnvironment" >> $GITHUB_ENV
              echo "NODE_ENV=$ebEnvironment" >> $GITHUB_ENV
          elif [[ ${GITHUB_REF:-noref} =~ ^refs/tags/.*-staging$ ]]; then
              ebEnvironment=staging
              echo "DATABASE_URL=${{secrets.AURORA_BASE_URL_LOWERS}}?schema=$ebEnvironment" >> $GITHUB_ENV
              echo "NODE_ENV=$ebEnvironment" >> $GITHUB_ENV
          elif [[ ${GITHUB_REF:-noref} =~ main ]]; then
              ebEnvironment=dev
              echo "DATABASE_URL=${{secrets.AURORA_BASE_URL_LOWERS}}?schema=$ebEnvironment" >> $GITHUB_ENV
              echo "NODE_ENV=$ebEnvironment" >> $GITHUB_ENV
          elif [[ ${GITHUB_REF:-noref} =~ ^refs/tags/sandbox$ ]]; then
              ebEnvironment=sandbox              
              echo "DATABASE_URL=${{secrets.AURORA_BASE_URL_LOWERS}}?schema=$ebEnvironment" >> $GITHUB_ENV
              echo "NODE_ENV=$ebEnvironment" >> $GITHUB_ENV
          fi          

          echo "*** Will deploy to ebEnvironment $ebEnvironment ***"

          echo "ebEnvironment: $ebEnvironment" >> build_info.yml
          echo "ebEnvironment=$ebEnvironment" >> $GITHUB_OUTPUT

      - name: Check If should deploy to sandbox environment based on pull request labels
        id: check-deploy-sandbox
        if: "contains(github.event.pull_request.labels.*.name, 'deploy-sandbox')"
        run: |
          ebEnvironment=sandbox
          echo "DATABASE_URL=${{secrets.AURORA_BASE_URL_LOWERS}}?schema=$ebEnvironment" >> $GITHUB_ENV
          echo "NODE_ENV=$ebEnvironment" >> $GITHUB_ENV
          echo "ebEnvironment=sandbox" >> $GITHUB_OUTPUT

      # Database migration
      - name: Prisma generate
        if: "!contains(steps.check-tag.outputs.ebEnvironment, 'none')" # run this job only if ebEnvironment is not none
        run: |
          echo "DATABASE URL=$DATABASE_URL" >> $GITHUB_OUTPUT
          yarn prisma-generate

      # Runs a set of commands using the runners shell
      - name: Build
        run: |
          yarn build
          ls -l
          echo [SUCCESS] yarn build succeeded.
          echo "DATABASE_URL=$DATABASE_URL" > .env
          echo "NODE_ENV=$NODE_ENV" >> .env
          zip -r artifacts.zip ./ "./node_modules/@prisma/client" -x "./.git*" "./test/*" "./src/*" "./node_modules/*"

      - name: Deploy to EB
        if: "!contains(steps.check-tag.outputs.ebEnvironment, 'none')" # run this job only if ebEnvironment is not none
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: nobaserver
          environment_name: nobaserver-${{steps.check-tag.outputs.ebEnvironment}}
          version_label: ${{steps.build_info.outputs.version_label}}
          use_existing_version_if_available: "true"
          wait_for_environment_recovery: 60
          region: us-east-1
          deployment_package: artifacts.zip

      - name: Deploy to EB Sandbox
        if: "contains(steps.check-deploy-sandbox.outputs.ebEnvironment, 'sandbox')" # run this job only if ebEnvironment is sandbox
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: nobaserver
          environment_name: nobaserver-${{steps.check-deploy-sandbox.outputs.ebEnvironment}}
          version_label: ${{steps.build_info.outputs.version_label}}
          use_existing_version_if_available: "true"
          wait_for_environment_recovery: 60
          region: us-east-1
          deployment_package: artifacts.zip