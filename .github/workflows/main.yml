# DONOT touch this file if you don't know what you are doing! TODO add codeowners file?

name: CI

# Controls when the workflow will run
on:
  # Only deploy the changes on push to master branch
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    branches: [master, dev]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  builddeploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.0
        with:
          node-version: 14.x

      - name: Setup Yarn
        uses: mskelton/setup-yarn@v1.0.1
        with:
          node-version: 14.x

      # Runs a single command using the runners shell
      - name: Install all packages
        run: |
          yarn install
          echo [SUCCESS] yarn install succeeded.

      # Run all tests first to prevent broken builds
      - name: Run tests
        run: |
          yarn run test
          echo [SUCCESS] tests successfully passed

      # Generates a build_info file which can be shown in buildInfo controller of the server
      - name: Generate build info file
        run: |
          cat > build_info.yml <<- EOM
          commitSHA: $GITHUB_SHA
          commitRef: $GITHUB_REF
          buildTime: $( date -u )
          EOM

          cat build_info.yml

      # Runs a set of commands using the runners shell
      - name: Build
        run: |
          yarn build
          ls -l
          echo [SUCCESS] yarn build succeeded.

      - name: Check If Release Tag and Decide deployment type
        id: check-tag
        run: |
          #TODO setup release and staging builds
          echo ::set-output name=release::false
          if [[ ${GITHUB_REF:-noref} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]] || [[ ${GITHUB_REF:-noref} =~ master ]] || [[ ${GITHUB_REF:-noref} =~ dev ]]; then
              echo ::set-output name=release::true
          fi

          #figure out AWS code deployment Group
          export deploymentGroup=Staging
          if [[ ${GITHUB_REF:-noref} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              export deploymentGroup=Production
          fi

          echo "*** Will deploy to $deploymentGroup ***"

          echo ::set-output name=deploymentGroup::$deploymentGroup

      - name: Create Artifacts Directory
        if: steps.check-tag.outputs.release == 'true'
        run: |
          mkdir artifacts
          mkdir uploads
          cp build_info.yml ./artifacts/build_info.yml
          cp appspec.yml ./artifacts/appspec.yml
          cp -R ./deployscripts/ artifacts 
          cp -R ./dist/ artifacts/
          cp -R ./node_modules/ artifacts
          cp -R ./cloudwatch_agents/ artifacts
          ls -ltr artifacts

      - name: AWS CodeDeploy
        uses: sourcetoad/aws-codedeploy-action@v1
        if: steps.check-tag.outputs.release == 'true'
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-east-1
          codedeploy_name: NobaServer
          codedeploy_group: ${{ steps.check-tag.outputs.deploymentGroup }}
          codedeploy_register_only: false
          s3_bucket: github-code-artifacts
          s3_folder: server
          # excluded_files: '.git/* .env storage/framework/cache/* node_modules/*'
          max_polling_iterations: 60
          directory: ./artifacts
