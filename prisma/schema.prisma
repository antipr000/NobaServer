// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// See https://www.npmjs.com/package/prisma-erd-generator
// TODO(CRYPTO-672) Commented out as errors occurred on AWS instances
// generator erd {
//   provider = "prisma-erd-generator"
//   theme    = "forest"
//   output   = "./generated/erd.svg"
// }

// generator erdmd {
//   provider = "prisma-erd-generator"
//   output   = "./generated/erd.md"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Consumer {
  id                   String                  @id @default(uuid())
  firstName            String?
  lastName             String?
  email                String?                 @unique()
  displayEmail         String?
  handle               String?                 @unique()
  referralCode         String                  @unique()
  phone                String?                 @unique()
  locale               String?
  gender               String?                 @db.VarChar(20) // Variable length to support other genders
  dateOfBirth          String?                 @db.VarChar(10)
  isLocked             Boolean                 @default(false)
  isDisabled           Boolean                 @default(false)
  createdTimestamp     DateTime?               @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp     DateTime?               @updatedAt // Marking optional so we don't need to set in tests
  socialSecurityNumber String?
  referredByID         String?
  referredBy           Consumer?               @relation("ReferredBy", fields: [referredByID], references: [id])
  referredConsumers    Consumer[]              @relation("ReferredBy")
  address              Address?
  verificationData     KYC?
  cryptoWallets        CryptoWallet[]
  paymentMethods       PaymentMethod[]
  circleAccountData    Circle?
  debitTransactions    Transaction[]           @relation("debitConsumer")
  creditTransactions   Transaction[]           @relation("creditConsumer")
  Employee             Employee[]
  pushTokens           PushToken[]
  pomeloUsers          PomeloUser?
  nobaCards            NobaCard[]
  identifications      Identification[]
  configurations       ConsumerConfiguration[]
  reminderHistory      ReminderHistory[]

  @@index([referredByID])
  @@index([createdTimestamp])
}

model Address {
  id          String   @id @default(uuid())
  streetLine1 String?
  streetLine2 String?
  city        String?
  countryCode String   @db.VarChar(3)
  regionCode  String?
  postalCode  String?
  consumer    Consumer @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID  String   @unique()
}

model KYC {
  id                            String                     @id @default(uuid())
  kycCheckReference             String?
  documentCheckReference        String?
  provider                      KYCProvider                @default(SARDINE)
  riskRating                    String?
  isSuspectedFraud              Boolean                    @default(false)
  kycCheckStatus                KYCStatus                  @default(NOT_SUBMITTED)
  documentVerificationStatus    DocumentVerificationStatus @default(REQUIRED)
  documentVerificationTimestamp DateTime?
  kycVerificationTimestamp      DateTime?
  sanctionLevel                 String?
  riskLevel                     String?
  consumer                      Consumer                   @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID                    String                     @unique()
}

model ConsumerConfiguration {
  id               String   @id @default(uuid())
  name             String
  value            String
  createdTimestamp DateTime @default(now())
  updatedTimestamp DateTime @updatedAt
  consumer         Consumer @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID       String

  @@index([consumerID])
}

model Employer {
  id                   String     @id @default(uuid())
  createdTimestamp     DateTime?  @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp     DateTime?  @updatedAt // Marking optional so we don't need to set in tests
  name                 String
  depositMatchingName  String?
  logoURI              String
  referralID           String     @unique()
  bubbleID             String     @unique()
  documentNumber       String?
  locale               String?
  leadDays             Int?
  maxAllocationPercent Float?
  payrollDates         String[]
  payrollAccountNumber String?
  Employee             Employee[]
  Payroll              Payroll[]
}

model Employee {
  id                      String                @id @default(uuid())
  createdTimestamp        DateTime?             @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp        DateTime?             @updatedAt // Marking optional so we don't need to set in tests
  allocationAmount        Float
  allocationCurrency      String
  salary                  Float?
  email                   String?
  status                  String
  lastInviteSentTimestamp DateTime?
  employer                Employer              @relation(fields: [employerID], references: [id], onDelete: Cascade)
  employerID              String
  consumer                Consumer?             @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID              String?
  PayrollDisbursement     PayrollDisbursement[]

  @@unique([consumerID, employerID])
}

model Payroll {
  id                       String                @id @default(uuid())
  employer                 Employer              @relation(fields: [employerID], references: [id], onDelete: Cascade)
  employerID               String
  referenceNumber          Int                   @default(autoincrement())
  payrollDate              String
  createdTimestamp         DateTime?             @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp         DateTime?             @updatedAt // Marking optional so we don't need to set in tests
  completedTimestamp       DateTime?
  totalDebitAmount         Float?
  totalCreditAmount        Float?
  exchangeRate             Float?
  debitCurrency            String?
  creditCurrency           String?
  status                   String
  paymentMonoTransactionID String?
  payrollDisbursement      PayrollDisbursement[]
}

model PayrollDisbursement {
  id               String       @id @default(uuid())
  createdTimestamp DateTime?    @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime?    @updatedAt // Marking optional so we don't need to set in tests
  payroll          Payroll      @relation(fields: [payrollID], references: [id], onDelete: Cascade)
  payrollID        String
  employee         Employee     @relation(fields: [employeeID], references: [id], onDelete: Cascade)
  employeeID       String
  transaction      Transaction? @relation(fields: [transactionID], references: [id], onDelete: Cascade)
  transactionID    String?      @unique()
  allocationAmount Float
  creditAmount     Float?

  @@unique([payrollID, employeeID])
}

model CryptoWallet {
  id               String       @id @default(uuid())
  address          String       @unique()
  createdTimestamp DateTime?    @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime?    @updatedAt // Marking optional so we don't need to set in tests
  name             String?
  chainType        String?
  isEVMCompatible  Boolean?
  status           WalletStatus @default(PENDING)
  riskScore        Float?
  consumer         Consumer     @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID       String
}

model PaymentMethod {
  id               String              @id @default(uuid())
  name             String?
  type             PaymentMethodType
  paymentToken     String              @unique()
  createdTimestamp DateTime?           @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime?           @updatedAt // Marking optional so we don't need to set in tests
  paymentProvider  PaymentProvider
  status           PaymentMethodStatus
  isDefault        Boolean             @default(false)
  imageUri         String?
  consumer         Consumer            @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID       String
  cardData         Card?
  achData          ACH?
}

model Card {
  id              String        @id @default(uuid())
  cardType        String?
  scheme          String?
  first6Digits    String
  last4Digits     String
  authCode        String?
  authReason      String?
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id], onDelete: Cascade)
  paymentMethodID String        @unique()
}

model ACH {
  id              String        @id @default(uuid())
  accountID       String
  accessToken     String
  itemID          String
  mask            String
  accountType     String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id], onDelete: Cascade)
  paymentMethodID String        @unique()
}

model Circle {
  id               String    @id
  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests
  walletID         String    @unique()
  consumer         Consumer  @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID       String    @unique()
  currentBalance   Float?

  @@index([currentBalance])
}

model Otp {
  id                     String       @id @default(uuid())
  otpIdentifier          String
  createdTimestamp       DateTime?    @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp       DateTime?    @updatedAt // Marking optional so we don't need to set in tests
  otp                    Int
  otpExpirationTimestamp DateTime
  identityType           IdentityType

  @@unique([otpIdentifier, identityType], name: "uniqueIdentifier")
  @@index([otp])
}

model LimitProfile {
  id                 String               @id @default(uuid())
  name               String
  daily              Float?
  weekly             Float?
  monthly            Float
  maxTransaction     Float
  minTransaction     Float
  unsettledExposure  Float?
  LimitConfiguration LimitConfiguration[]
  createdTimestamp   DateTime?            @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp   DateTime?            @updatedAt // Marking optional so we don't need to set in tests
}

model LimitConfiguration {
  id                        String             @id @default(uuid())
  isDefault                 Boolean            @default(false)
  priority                  Int
  profile                   LimitProfile       @relation(fields: [profileID], references: [id], onDelete: Cascade)
  profileID                 String
  transactionType           TransactionType?
  minProfileAge             Int?
  minBalanceInWallet        Float?
  minTotalTransactionAmount Float?
  paymentMethodType         PaymentMethodType?
  createdTimestamp          DateTime?          @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp          DateTime?          @updatedAt // Marking optional so we don't need to set in tests
}

model Transaction {
  id                  String               @id @default(uuid())
  transactionRef      String               @unique()
  workflowName        String
  debitConsumer       Consumer?            @relation("debitConsumer", fields: [debitConsumerID], references: [id], onDelete: Cascade)
  debitConsumerID     String?
  creditConsumer      Consumer?            @relation("creditConsumer", fields: [creditConsumerID], references: [id], onDelete: Cascade)
  creditConsumerID    String?
  status              String               @default("INITIATED")
  memo                String?
  sessionKey          String
  debitCurrency       String?
  creditCurrency      String?
  debitAmount         Float?
  creditAmount        Float?
  exchangeRate        Float?
  createdTimestamp    DateTime?            @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp    DateTime?            @updatedAt // Marking optional so we don't need to set in tests
  transactionEvents   TransactionEvent[]
  Mono                Mono?
  WithdrawalDetails   WithdrawalDetails[]
  transactionFees     TransactionFee[]
  payrollDisbursement PayrollDisbursement?
}

model TransactionEvent {
  id            String      @id @default(uuid())
  timestamp     DateTime?   @default(now()) // Marking optional so we don't need to set in tests
  transaction   Transaction @relation(fields: [transactionID], references: [id], onDelete: Cascade)
  transactionID String
  internal      Boolean     @default(true)
  message       String
  details       String?
  key           String?
  param1        String?
  param2        String?
  param3        String?
  param4        String?
  param5        String?
}

model TransactionFee {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionID], references: [id], onDelete: Cascade)
  transactionID String
  type          String
  amount        Float
  currency      String
  timestamp     DateTime?   @default(now()) // Marking optional so we don't need to set in tests
}

model Mono {
  id                       String      @id @default(uuid())
  monoPaymentTransactionID String?
  collectionLinkID         String?
  collectionURL            String?
  type                     String
  transferID               String?
  batchID                  String?
  declinationReason        String?
  state                    String
  nobaTransactionID        String      @unique()
  transaction              Transaction @relation(fields: [nobaTransactionID], references: [id], onDelete: Cascade)
  createdTimestamp         DateTime?   @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp         DateTime?   @updatedAt // Marking optional so we don't need to set in tests

  // Can't add @unique() on 'collectionLinkID' or 'transferID'
  // See https://github.com/prisma/prisma/issues/3387 for more details.
}

model PomeloUser {
  id                String              @id @default(uuid())
  consumerID        String              @unique()
  consumer          Consumer            @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  pomeloID          String              @unique()
  createdTimestamp  DateTime?           @default(now())
  updatedTimestamp  DateTime?           @updatedAt
  pomeloCard        PomeloCard[]
  PomeloTransaction PomeloTransaction[]
}

model NobaCard {
  id               String      @id @default(uuid())
  provider         String
  status           String
  type             String
  last4Digits      String
  consumerID       String
  consumer         Consumer    @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  createdTimestamp DateTime?   @default(now())
  updatedTimestamp DateTime?   @updatedAt
  pomeloCard       PomeloCard?
}

model PomeloCard {
  id                String              @id @default(uuid())
  nobaCardID        String              @unique()
  pomeloCardID      String              @unique()
  pomeloUserID      String
  pomeloUser        PomeloUser          @relation(fields: [pomeloUserID], references: [pomeloID], onDelete: Cascade)
  nobaCard          NobaCard            @relation(fields: [nobaCardID], references: [id], onDelete: Cascade)
  createdTimestamp  DateTime?           @default(now())
  updatedTimestamp  DateTime?           @updatedAt
  PomeloTransaction PomeloTransaction[]

  @@unique([pomeloUserID, pomeloCardID])
}

model PomeloTransaction {
  id                        String              @id @default(uuid())
  pomeloTransactionID       String              @unique()
  parentPomeloTransactionID String?
  parentPomeloTransaction   PomeloTransaction?  @relation("parentPomeloTransaction", fields: [parentPomeloTransactionID], references: [pomeloTransactionID], onDelete: Cascade)
  childPomeloTransactions   PomeloTransaction[] @relation("parentPomeloTransaction")
  nobaTransactionID         String              @unique() // Note that this is not linked to "Transaction" model intentionally.
  pomeloIdempotencyKey      String              @unique()
  settlementDate            String
  status                    String
  pomeloCardID              String
  pomeloCard                PomeloCard          @relation(fields: [pomeloCardID], references: [pomeloCardID], onDelete: Cascade)
  pomeloUserID              String
  pomeloUser                PomeloUser          @relation(fields: [pomeloUserID], references: [pomeloID], onDelete: Cascade)
  amountInUSD               Float
  localAmount               Float
  localCurrency             String
  settlementAmount          Float
  settlementCurrency        String
  transactionAmount         Float
  transactionCurrency       String
  pomeloTransactionType     String
  pointType                 String
  entryMode                 String
  countryCode               String
  origin                    String
  source                    String
  merchantName              String
  merchantMCC               String
  createdTimestamp          DateTime?           @default(now())
  updatedTimestamp          DateTime?           @updatedAt
}

model Token {
  id               String    @id
  tokenType        TokenType
  expiryTime       DateTime?
  userID           String
  isUsed           Boolean   @default(false)
  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests
}

model Admin {
  id               String    @id @default(uuid())
  name             String?
  email            String    @unique()
  role             String
  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests
}

model Verification {
  id               String    @id @default(uuid())
  consumerID       String?
  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests

  @@unique([id, consumerID])
}

model CreditCardBIN {
  id        String  @id @default(uuid())
  issuer    String?
  bin       String  @unique()
  type      String
  network   String
  mask      String?
  supported String
  digits    Int
  cvvDigits Int

  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests

  @@index([supported])
}

model ExchangeRate {
  id                  String    @id @default(uuid())
  createdTimestamp    DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp    DateTime? @updatedAt // Marking optional so we don't need to set in tests
  numeratorCurrency   String    @db.VarChar(3)
  denominatorCurrency String    @db.VarChar(3)
  bankRate            Float
  nobaRate            Float
  expirationTimestamp DateTime

  @@index([numeratorCurrency, denominatorCurrency])
  @@index([createdTimestamp])
}

model WithdrawalDetails {
  id             String      @id @default(uuid())
  bankCode       String
  accountNumber  String
  accountType    String
  documentNumber String
  documentType   String
  transaction    Transaction @relation(fields: [transactionID], references: [id], onDelete: Cascade)
  transactionID  String      @unique()
}

model PushToken {
  id               String    @id @default(uuid())
  consumer         Consumer  @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID       String
  pushToken        String
  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests

  @@unique([consumerID, pushToken])
}

model Identification {
  id               String    @id @default(uuid())
  consumer         Consumer  @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  consumerID       String
  type             String
  value            String
  countryCode      String    @db.VarChar(2)
  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests

  @@unique([consumerID, type, countryCode])
}

model ReminderHistory {
  id                 String           @id @default(uuid())
  createdTimestamp   DateTime?        @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp   DateTime?        @updatedAt // Marking optional so we don't need to set in tests
  reminderScheduleID String
  reminderSchedule   ReminderSchedule @relation(fields: [reminderScheduleID], references: [id], onDelete: Cascade)
  consumerID         String
  consumer           Consumer         @relation(fields: [consumerID], references: [id], onDelete: Cascade)
  lastSentTimestamp  DateTime
  eventID            String
  event              Event            @relation(fields: [eventID], references: [id], onDelete: Cascade)

  @@unique([reminderScheduleID, consumerID])
  @@index([eventID, lastSentTimestamp])
}

model ReminderSchedule {
  id               String            @id @default(uuid())
  createdTimestamp DateTime?         @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime?         @updatedAt // Marking optional so we don't need to set in tests
  eventID          String            @unique()
  event            Event             @relation(fields: [eventID], references: [id], onDelete: Cascade)
  query            String
  groupKey         String
  reminderHistory  ReminderHistory[]
}

model Event {
  id               String            @id @default(uuid())
  name             String            @unique
  createdTimestamp DateTime?         @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime?         @updatedAt // Marking optional so we don't need to set in tests
  handlers         String[]
  templates        EventTemplate[]
  reminderSchedule ReminderSchedule?
  ReminderHistory  ReminderHistory[]
}

model EventTemplate {
  id               String    @id @default(uuid())
  createdTimestamp DateTime? @default(now()) // Marking optional so we don't need to set in tests
  updatedTimestamp DateTime? @updatedAt // Marking optional so we don't need to set in tests
  templateBody     String?
  templateTitle    String?
  externalKey      String?
  type             String
  locale           String
  eventID          String
  event            Event     @relation(fields: [eventID], references: [id], onDelete: Cascade)

  @@index([eventID])
}

enum IdentityType {
  CONSUMER
  NOBA_ADMIN
}

enum KYCStatus {
  NOT_SUBMITTED
  PENDING
  APPROVED
  FLAGGED
  REJECTED
}

enum DocumentVerificationStatus {
  NOT_REQUIRED
  REQUIRED
  PENDING
  APPROVED
  REJECTED
  REJECTED_DOCUMENT_REQUIRES_RECAPTURE
  REJECTED_DOCUMENT_POOR_QUALITY
  REJECTED_DOCUMENT_INVALID_SIZE_OR_TYPE
  LIVE_PHOTO_VERIFIED
}

enum WalletStatus {
  PENDING
  FLAGGED
  REJECTED
  APPROVED
  DELETED
}

enum PaymentMethodType {
  CARD
  ACH
}

enum PaymentProvider {
  CHECKOUT
}

enum PaymentMethodStatus {
  FLAGGED
  REJECTED
  APPROVED
  UNSUPPORTED
  DELETED
}

enum KYCProvider {
  SARDINE
}

enum TransactionType {
  NOBA_WALLET
}

enum TokenType {
  REFRESH_TOKEN
}
